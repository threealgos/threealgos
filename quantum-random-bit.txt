import cirq
import random

# Function to create a quantum circuit for generating random bits
def create_random_bit_circuit(seed):
    # Create a qubit
    qubit = cirq.NamedQubit("q")
    
    # Create a circuit
    circuit = cirq.Circuit()
    
    # Apply a Hadamard gate to put the qubit in superposition
    circuit.append(cirq.H(qubit))
    
    # Use the seed to influence randomness
    circuit.append(cirq.measure(qubit, key='result'))
    
    return circuit

# Function to run the quantum circuit and get a random bit
def run_quantum_random_bit(seed):
    # Create the circuit
    circuit = create_random_bit_circuit(seed)
    
    # Create a simulator with a random seed
    simulator = cirq.Simulator(seed=seed)
    
    # Run the circuit
    result = simulator.run(circuit, repetitions=1)
    
    # Extract the result
    random_bit = result.measurements['result'][0][0]
    return random_bit

# Main loop to generate random numbers
while True:
    # Generate a random seed from Python's random module
    seed = random.randint(0, 2**32 - 1)
    
    # Generate a random bit using the quantum circuit
    random_bit = run_quantum_random_bit(seed)
    
    # Convert the random bit to a hexadecimal representation
    hex_value = hex(random_bit)[2:].rjust(46, '0')
    
    # Print the generated value
    print("Generated random value:", hex_value)
    
    # Check if the hex_value meets specific criteria
    if hex_value.startswith('19vkiEajfhuZ8bs8Zu2jgmC6oqZbWqh'):
        print("Found!!", hex_value)
        # Save the result to a file
        with open('boom.txt', 'a') as file:
            file.write("Random value: " + hex_value + '\n')
        break  # Exit the loop if the condition is met
    else:
        print("Searching...", hex_value, end='\r')
