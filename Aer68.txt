import qiskit
from qiskit import QuantumCircuit, Aer, transpile, assemble, execute
from qiskit.visualization import plot_histogram
from bitcoin import privtopub, encode_pubkey, pubtoaddr
import random

# Function to create a quantum circuit for generating random bits
def create_random_bit_circuit(num_bits):
    # Create a quantum circuit
    circuit = QuantumCircuit(num_bits, num_bits)
    
    # Apply Hadamard gate to each qubit to put them in superposition
    circuit.h(range(num_bits))
    
    # Measure the qubits
    circuit.measure(range(num_bits), range(num_bits))
    
    return circuit

# Function to run the quantum circuit and get a random number
def run_quantum_random_number(num_bits):
    # Create the circuit
    circuit = create_random_bit_circuit(num_bits)
    
    # Use the Qiskit Aer simulator
    simulator = Aer.get_backend('qasm_simulator')
    
    # Transpile and assemble the circuit
    transpiled_circuit = transpile(circuit, simulator)
    qobj = assemble(transpiled_circuit)
    
    # Execute the circuit
    result = execute(transpiled_circuit, simulator, shots=1).result()
    
    # Extract the result as a binary string
    random_bits = result.get_counts().most_frequent()
    
    # Convert binary string to an integer
    random_number = int(random_bits, 2)
    return random_number

# Main loop to generate random numbers
while True:
    # Generate a random number using the quantum circuit
    num_bits = 68  # Bitcoin private keys are 68 bits
    random_number = run_quantum_random_number(num_bits)
    
    # Convert the random number to a hexadecimal representation
    hex_value = hex(random_number)[2:].rjust(64, '0')  # 64 hex digits for 256 bits
    
    # Generate the corresponding public address
    priv = hex_value
    pub = privtopub(priv)
    pubkey1 = encode_pubkey(pub, "bin_compressed")
    addr = pubtoaddr(pubkey1)
    
    # Print the generated value
    print("Generated random value:", hex_value)
    
    # Check if the generated address matches the target address
    if addr == '1MVDYgVaSN6iKKEsbzRUAYFrYJadLYZvvZ':
        print("Found!!", addr, "with private key:", priv)
        # Save the result to a file
        with open('boom.txt', 'a') as file:
            file.write("Private key: " + priv + '\n' + "Address: " + addr + '\n\n')
        break  # Exit the loop if the condition is met
    else:
        print("Searching...", addr, hex_value, end='\r')
